#summary Overview of the .NET Entity Framework adapter library.
#labels EntityFramework,db4o

= Introduction =

The Db4objects.Db4o.!EntityFramework assembly is an adapter for .NET 4.0 Entity Framework (net4ef).


== Whats Included? ==

  * `Db4oEntityContext`: Wraps up the db4o IObjectContainer and presents your application with a set of interfaces more similar to the !DataContext generated by net4ef.
    * I had attempted to create !Db4oEntityContext as a dynamic class that would emit its own strongly-typed access properties, but apparently .NET dynamic types don't support extension methods, so you can't use LINQ on a dynamic type. I left the code there for now. To use it, just use `dynamic db = new Db4oEntityContext(fileName);` instead of `var db = new Db4oEntityContext(fileName);`.
  * `Db4oEntitySet`: Simple, strongly-typed and queryable entity "table" adapter.

  
== What isn't included? ==

No data annotation support of any kind. Support for System.!ComponentModel.!DataAnnotations will come in a separate bundle so it can be used on its own without the net4ef adapter.

= Getting Started =

  # Download and compile the Db4objects.Db4o.!EntityFramework assembly.
  # Inherit from !Db4oEntityContext to hook up your strongly-typed access members. See [http://code.google.com/p/db4o-extras/source/browse/trunk/net/Db4objects.Db4o.EntityFramework.Test/Model/ModelTestEntities.cs ModelTestEntities.cs] for an example.

{{{
using System;
using System.Linq;
using Db4objects.Db4o.EntityFramework;

public class MyEntityContext : Db4oEntityContext{
  public MyEntityContext() : base("MyApplication.db4o") {}

  public Db4oEntitySet<Car> Cars{
    get{ return GetEntitySet<Car>("Cars"); }
  }  

  public Db4oEntitySet<Person> People{
    get{ return GetEntitySet<Person>("People"); }
  }
}
}}}